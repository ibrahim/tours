-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module Tour.InputObject exposing (SaveEventInput, SaveEventInputOptionalFields, SaveTripInput, SaveTripInputOptionalFields, buildSaveEventInput, buildSaveTripInput, encodeSaveEventInput, encodeSaveTripInput)

import Graphql.Internal.Builder.Argument as Argument exposing (Argument)
import Graphql.Internal.Builder.Object as Object
import Graphql.Internal.Encode as Encode exposing (Value)
import Graphql.OptionalArgument exposing (OptionalArgument(..))
import Graphql.SelectionSet exposing (SelectionSet)
import Json.Decode as Decode
import Tour.Interface
import Tour.Object
import Tour.Scalar
import Tour.ScalarCodecs
import Tour.Union


buildSaveEventInput : (SaveEventInputOptionalFields -> SaveEventInputOptionalFields) -> SaveEventInput
buildSaveEventInput fillOptionals =
    let
        optionals =
            fillOptionals
                { clientMutationId = Absent, uuid = Absent, type_ = Absent, title = Absent, notes = Absent, price = Absent, currency = Absent, starts_at = Absent, duration = Absent, day = Absent, trip_id = Absent }
    in
    { clientMutationId = optionals.clientMutationId, uuid = optionals.uuid, type_ = optionals.type_, title = optionals.title, notes = optionals.notes, price = optionals.price, currency = optionals.currency, starts_at = optionals.starts_at, duration = optionals.duration, day = optionals.day, trip_id = optionals.trip_id }


type alias SaveEventInputOptionalFields =
    { clientMutationId : OptionalArgument String
    , uuid : OptionalArgument String
    , type_ : OptionalArgument String
    , title : OptionalArgument String
    , notes : OptionalArgument String
    , price : OptionalArgument Int
    , currency : OptionalArgument String
    , starts_at : OptionalArgument String
    , duration : OptionalArgument Int
    , day : OptionalArgument Int
    , trip_id : OptionalArgument String
    }


{-| Type for the SaveEventInput input object.
-}
type alias SaveEventInput =
    { clientMutationId : OptionalArgument String
    , uuid : OptionalArgument String
    , type_ : OptionalArgument String
    , title : OptionalArgument String
    , notes : OptionalArgument String
    , price : OptionalArgument Int
    , currency : OptionalArgument String
    , starts_at : OptionalArgument String
    , duration : OptionalArgument Int
    , day : OptionalArgument Int
    , trip_id : OptionalArgument String
    }


{-| Encode a SaveEventInput into a value that can be used as an argument.
-}
encodeSaveEventInput : SaveEventInput -> Value
encodeSaveEventInput input =
    Encode.maybeObject
        [ ( "clientMutationId", Encode.string |> Encode.optional input.clientMutationId ), ( "uuid", Encode.string |> Encode.optional input.uuid ), ( "_type", Encode.string |> Encode.optional input.type_ ), ( "title", Encode.string |> Encode.optional input.title ), ( "notes", Encode.string |> Encode.optional input.notes ), ( "price", Encode.int |> Encode.optional input.price ), ( "currency", Encode.string |> Encode.optional input.currency ), ( "starts_at", Encode.string |> Encode.optional input.starts_at ), ( "duration", Encode.int |> Encode.optional input.duration ), ( "day", Encode.int |> Encode.optional input.day ), ( "trip_id", Encode.string |> Encode.optional input.trip_id ) ]


buildSaveTripInput : (SaveTripInputOptionalFields -> SaveTripInputOptionalFields) -> SaveTripInput
buildSaveTripInput fillOptionals =
    let
        optionals =
            fillOptionals
                { clientMutationId = Absent, uuid = Absent, status = Absent, name = Absent, price = Absent, start_at = Absent, description = Absent, download_pdf = Absent, messaging = Absent, overview_map = Absent }
    in
    { clientMutationId = optionals.clientMutationId, uuid = optionals.uuid, status = optionals.status, name = optionals.name, price = optionals.price, start_at = optionals.start_at, description = optionals.description, download_pdf = optionals.download_pdf, messaging = optionals.messaging, overview_map = optionals.overview_map }


type alias SaveTripInputOptionalFields =
    { clientMutationId : OptionalArgument String
    , uuid : OptionalArgument String
    , status : OptionalArgument Int
    , name : OptionalArgument String
    , price : OptionalArgument String
    , start_at : OptionalArgument String
    , description : OptionalArgument String
    , download_pdf : OptionalArgument Bool
    , messaging : OptionalArgument Bool
    , overview_map : OptionalArgument Bool
    }


{-| Type for the SaveTripInput input object.
-}
type alias SaveTripInput =
    { clientMutationId : OptionalArgument String
    , uuid : OptionalArgument String
    , status : OptionalArgument Int
    , name : OptionalArgument String
    , price : OptionalArgument String
    , start_at : OptionalArgument String
    , description : OptionalArgument String
    , download_pdf : OptionalArgument Bool
    , messaging : OptionalArgument Bool
    , overview_map : OptionalArgument Bool
    }


{-| Encode a SaveTripInput into a value that can be used as an argument.
-}
encodeSaveTripInput : SaveTripInput -> Value
encodeSaveTripInput input =
    Encode.maybeObject
        [ ( "clientMutationId", Encode.string |> Encode.optional input.clientMutationId ), ( "uuid", Encode.string |> Encode.optional input.uuid ), ( "status", Encode.int |> Encode.optional input.status ), ( "name", Encode.string |> Encode.optional input.name ), ( "price", Encode.string |> Encode.optional input.price ), ( "start_at", Encode.string |> Encode.optional input.start_at ), ( "description", Encode.string |> Encode.optional input.description ), ( "download_pdf", Encode.bool |> Encode.optional input.download_pdf ), ( "messaging", Encode.bool |> Encode.optional input.messaging ), ( "overview_map", Encode.bool |> Encode.optional input.overview_map ) ]
