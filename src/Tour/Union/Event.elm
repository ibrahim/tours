-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module Tour.Union.Event exposing (Fragments, fragments, maybeFragments)

import Graphql.Internal.Builder.Argument as Argument exposing (Argument)
import Graphql.Internal.Builder.Object as Object
import Graphql.Internal.Encode as Encode exposing (Value)
import Graphql.Operation exposing (RootMutation, RootQuery, RootSubscription)
import Graphql.OptionalArgument exposing (OptionalArgument(..))
import Graphql.SelectionSet exposing (FragmentSelectionSet(..), SelectionSet(..))
import Json.Decode as Decode
import Tour.InputObject
import Tour.Interface
import Tour.Object
import Tour.Scalar
import Tour.ScalarCodecs
import Tour.Union


type alias Fragments decodesTo =
    { onActivity : SelectionSet decodesTo Tour.Object.Activity
    , onLodging : SelectionSet decodesTo Tour.Object.Lodging
    , onFlight : SelectionSet decodesTo Tour.Object.Flight
    , onTransportation : SelectionSet decodesTo Tour.Object.Transportation
    , onCruise : SelectionSet decodesTo Tour.Object.Cruise
    , onInformation : SelectionSet decodesTo Tour.Object.Information
    , onDining : SelectionSet decodesTo Tour.Object.Dining
    }


{-| Build up a selection for this Union by passing in a Fragments record.
-}
fragments :
    Fragments decodesTo
    -> SelectionSet decodesTo Tour.Union.Event
fragments selections =
    Object.exhuastiveFragmentSelection
        [ Object.buildFragment "Activity" selections.onActivity
        , Object.buildFragment "Lodging" selections.onLodging
        , Object.buildFragment "Flight" selections.onFlight
        , Object.buildFragment "Transportation" selections.onTransportation
        , Object.buildFragment "Cruise" selections.onCruise
        , Object.buildFragment "Information" selections.onInformation
        , Object.buildFragment "Dining" selections.onDining
        ]


{-| Can be used to create a non-exhuastive set of fragments by using the record
update syntax to add `SelectionSet`s for the types you want to handle.
-}
maybeFragments : Fragments (Maybe decodesTo)
maybeFragments =
    { onActivity = Graphql.SelectionSet.empty |> Graphql.SelectionSet.map (\_ -> Nothing)
    , onLodging = Graphql.SelectionSet.empty |> Graphql.SelectionSet.map (\_ -> Nothing)
    , onFlight = Graphql.SelectionSet.empty |> Graphql.SelectionSet.map (\_ -> Nothing)
    , onTransportation = Graphql.SelectionSet.empty |> Graphql.SelectionSet.map (\_ -> Nothing)
    , onCruise = Graphql.SelectionSet.empty |> Graphql.SelectionSet.map (\_ -> Nothing)
    , onInformation = Graphql.SelectionSet.empty |> Graphql.SelectionSet.map (\_ -> Nothing)
    , onDining = Graphql.SelectionSet.empty |> Graphql.SelectionSet.map (\_ -> Nothing)
    }
