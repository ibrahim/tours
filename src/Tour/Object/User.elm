-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module Tour.Object.User exposing (EventOptionalArguments, TripsOptionalArguments, email, event, id, trips)

import Graphql.Internal.Builder.Argument as Argument exposing (Argument)
import Graphql.Internal.Builder.Object as Object
import Graphql.Internal.Encode as Encode exposing (Value)
import Graphql.Operation exposing (RootMutation, RootQuery, RootSubscription)
import Graphql.OptionalArgument exposing (OptionalArgument(..))
import Graphql.SelectionSet exposing (SelectionSet)
import Json.Decode as Decode
import Tour.InputObject
import Tour.Interface
import Tour.Object
import Tour.Scalar
import Tour.ScalarCodecs
import Tour.Union


email : SelectionSet String Tour.Object.User
email =
    Object.selectionForField "String" "email" [] Decode.string


type alias EventOptionalArguments =
    { uuid : OptionalArgument String
    , trip_id : OptionalArgument String
    }


{-| Event type
-}
event : (EventOptionalArguments -> EventOptionalArguments) -> SelectionSet decodesTo Tour.Union.Event -> SelectionSet (Maybe decodesTo) Tour.Object.User
event fillInOptionals object_ =
    let
        filledInOptionals =
            fillInOptionals { uuid = Absent, trip_id = Absent }

        optionalArgs =
            [ Argument.optional "uuid" filledInOptionals.uuid Encode.string, Argument.optional "trip_id" filledInOptionals.trip_id Encode.string ]
                |> List.filterMap identity
    in
    Object.selectionForCompositeField "event" optionalArgs object_ (identity >> Decode.nullable)


id : SelectionSet Tour.ScalarCodecs.Id Tour.Object.User
id =
    Object.selectionForField "ScalarCodecs.Id" "id" [] (Tour.ScalarCodecs.codecs |> Tour.Scalar.unwrapCodecs |> .codecId |> .decoder)


type alias TripsOptionalArguments =
    { status : OptionalArgument String
    , limit : OptionalArgument Int
    , uuid : OptionalArgument String
    }


trips : (TripsOptionalArguments -> TripsOptionalArguments) -> SelectionSet decodesTo Tour.Object.Trip -> SelectionSet (List decodesTo) Tour.Object.User
trips fillInOptionals object_ =
    let
        filledInOptionals =
            fillInOptionals { status = Absent, limit = Absent, uuid = Absent }

        optionalArgs =
            [ Argument.optional "status" filledInOptionals.status Encode.string, Argument.optional "limit" filledInOptionals.limit Encode.int, Argument.optional "uuid" filledInOptionals.uuid Encode.string ]
                |> List.filterMap identity
    in
    Object.selectionForCompositeField "trips" optionalArgs object_ (identity >> Decode.list)
